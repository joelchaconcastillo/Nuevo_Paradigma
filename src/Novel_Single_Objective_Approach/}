#ifndef __EVOLUTION_H_
#define __EVOLUTION_H_

#include <cfloat>
#include <set>
#include <queue>
#include <map>
#include <unordered_set>
#include <iomanip>
#include <iterator>
#include "global.h"
#include "problem.h"

class CMOEAD
{

   public:
	CMOEAD();
	~CMOEAD();

	void init_population();                
	void obj_eval(double *x_var, double *y_obj);
	inline void update_reference(double *point){for(int n=0; n<nobj; n++) if(point[n]<idealpoint[n]) idealpoint[n] = point[n];}
	void replacement_phase();
	void evol_population();                                    
	void exec_emo(int run);
	void save_front(char savefilename[4024]); 
	void save_pos(char savefilename[4024]);
	void update_parameterD();
	void update_external_file(double *archive);
	double distance_var( int a, int b);
	inline int* pointer_hyp(int a, int b){  return hypermat_assig +a*(nPop+nOffspring)*nInd + b*nInd; }
	inline double* pointer_dist(int a, int b){ if(a > b) swap(a, b);  return memo_dist + a*(nPop+nOffspring) + b; }

	void realmutation(vector<double> &x_var, double rate);
	void diff_evo_xoverA_exp(strIndividual &ind0, strIndividual &ind1, strIndividual &ind2, strIndividual &ind3, strIndividual &child, double CR, double F, int *asg_1, int *asg_2, int *asg_3);
	void eval_R2(strIndividual &ind, int rank);
	double distance_obj(double *a, double *b);
	double fitnessfunction(double *y_obj, double *namda);
	void non_dominated_sorting(int c_idx);

   private:
        
	int* child_idx, *parent_idx; 
	double *R2_pop;     // weight vector
	// algorithm parameters
	long long nfes;          //  the number of function evluations
	double	D;	//Current minimum distance
	int n_archive;
};
CMOEAD::CMOEAD()
{

}

void CMOEAD::update_parameterD()
{
      double TElapsed = nfes, TEnd = max_nfes;
      D = Di - Di * (TElapsed / (TEnd*Df));
      D = max(D, 0.0);
}
double CMOEAD::distance_var(int a, int b)
{
   double *distab=pointer_dist(a,b);
   if(*distab > 0.0) return *distab;
   int *asg_1 = pointer_hyp(a,b);
   if(*asg_1==-1)
   {
     for(int i = 0; i < nInd; i++)
      for(int j = 0; j < nInd; j++)
       costs[i*nInd+j] = -distance_obj(pool[a].y_obj[i], pool[b].y_obj[j]);
     KM.hungarian(costs, asg_1);
   }
   double dist = 0.0
   for(int i = 0; i < nInd; i++)
   {
      for(int j = 0; j < nvar; j++)
      {
         double factor = (pool[a].x_var[i][j]-pool[b].x_var[asg_1[i]][j])/(vuppBound[j]-vlowBound[j]);
         dist += factor*factor;
      }
   }
   (*distab) = sqrt(dist);
   return sqrt(dist);
}
CMOEAD::~CMOEAD()
{
   delete [] x_var;
   delete [] y_obj;
   delete [] idealpoint;
   delete [] fitness;
   delete [] size_fitness;
   delete [] changed;

   delete [] fronts; 
   delete [] size_fronts;
   delete [] domin_to;
   delete [] times_dominated;
   delete [] size_domin_to;

   delete [] namda;
   delete [] costs;
   delete [] hypermat_assig;
   delete [] memo_dist;
}
void CMOEAD::init_population()
{
    NP = nOffspring + nPop;
    char filename[1024];
    // Read weight vectors from a data file
    sprintf(filename,"%s/ParameterSetting/Weight/W%dD_%d.dat", strpath, nobj, nWeight);
    std::ifstream readf(filename);
    KM.init(nInd);

    x_var = new double[nvar*nInd*NP];
    y_obj = new double[nobj*nInd*NP];
    idealpoint = new double[nobj]; 
    fitness = new double[NP*nInd];
    changed = new bool[nInd*NP];

    fronts = new int[nInd*nInd*NP];
    size_fronts = new int[nInd*NP];
    domin_to = new int[nInd*nInd];
    time_dominated = new int[nInd];
    size_domin_to = new int[nInd];
    size_fitness = new int[NP*nInd];//!!!!
    hypermat_assig = new int[NP*NP*nInd];

    namda = new double[nobj*nWeight];
    costs = new double[nInd*nInd*3];
    memo_dist = new double[NP*NP];

    memset(hypermat_assig, -1, sizeof(int)*NP*NP*nInd);
    fill_n(memo_dist, NP*NP, -1);
    fill_n(idealpoint, nobj, 1000000000);
    memset(changed, false, sizeof(bool)*nInd*NP);
    
    n_archive=100;
    // Load weight vectors
    for(int i=0; i< nWeight; i++)
	for(int j=0; j<nobj; j++)
	 readf>>namda[i*nobj + j];
    
    for(int i=0; i < NP; i++)
    {
        for(int k= 0; k < nInd; k++)
	{  
	   for(int n = 0; n<nvar; n++) x_var[i*nvar*nInd + k*nInd + n] = vlowBound[n] + rnd_uni*(vuppBound[n] - vlowBound[n]);     
	   obj_eval(x_var[i*nvar*nInd+k*nInd], y_obj[i*nobj*nInd + k*nobj]);
	   update_reference(y_obj[i*nobj*nInd + k*nobj]);
	   //R2_pop.push_back(y_obj[i*nInd*obj]);
	}
        //non_dominated_sorting(y_obj[i*nobj*nInd], fronts[i*nInd*nInd]);
        non_dominated_sorting(i);
	if( i < nPop)
           parent_idx[i] = i;
	else
	   child_idx[i-nPop] = i;
	nfes +=nInd;
     }
//     update_external_file(R2_pop);
     readf.close();
}
void CMOEAD::evol_population()
{
   for(int i = 0; i < nOffspring; i++)
   {
      int idx1=parent_idx[rand()% nPop], idx2=parent_idx[rand()%nPop], idx3=parent_idx[rand()%nPop], idx_target = parent_idx[i], idx_c = child_idx[i];
      while(idx1 == idx_target) idx1=parent_idx[rand()%nPop];
      while(idx2 == idx1 || idx2 == idx_target) idx2=parent_idx[rand()%nPop];
      while(idx3 == idx2 || idx3 == idx1 || idx3 == idx_target) idx3=parent_idx[rand()%nPop];
      for(int m = 0; m < nobj*nInd; m++)   y_obj[idx_c*nInd*nobj + m] = y_obj[idx_target*nInd*nobj + m];
      for(int n = 0; n < nvar*nInd; n++)   x_var[idx_c*nInd*nvar + n] = x_var[idx_target*nInd*nvar + n];

      int *asg_1  = pointer_hyp(idx_target, idx1) , *asg_2 = pointer_hyp(idx_target, idx2), *asg_3 = pointer_hyp(idx_target, idx3);
      if( *asg_1 == -1 || *asg_2 == -1 || *asg_3 == -1)
      {
          for(int ii = 0; ii < nInd; ii++)
          {
         	for(int jj = 0; jj < nInd; jj++)
         	{
        	   if(*asg_1 == -1) costs[ii*nInd+jj] =-distance_obj(y_obj[idx_target*nobj*nInd + ii*nobj], y_obj[idx1*nobj*nInd +nobj*jj]);
        	   if(*asg_2 == -1) costs[ii*nInd+jj+nInd*nInd] =-distance_obj(y_obj[idx_target*nobj*nInd + ii*nobj], y_obj[idx2*nobj*nInd +nobj*jj]);
        	   if(*asg_3 == -1) costs[ii*nInd+jj+2*nInd*nInd] =-distance_obj(y_obj[idx_target*nobj*nInd + ii*nobj], y_obj[idx3*nobj*nInd +nobj*jj]);
         	}
          }
      }
        if(*asg_1 == -1) KM.hungarian(costs, asg_1);
      	if(*asg_2 == -1) KM.hungarian(costs + nInd*nInd, asg_2);
      	if(*asg_3 == -1) KM.hungarian(costs + 2*nInd*nInd, asg_3);
      diff_evo_xoverA_exp(x_var[idx_target*nInd*nvar], x_var[idx1*nInd*nvar], x_var[idx2*nInd*nvar], x_var[idx3*nInd*nvar], x_var[idx_c*nInd*nvar], CR, F, asg_1, asg_2, asg_3);

      for(int k = 0; k < nInd; k++)
      {	
	   if(!changed[c_idx*nInd*nobj+nobj*k]) continue;
           realmutation(x_var[c_idx*nInd*nvar+k*nobj], 1.0/nvar);
           obj_eval(x_var[c_idx*nInd*nvar+k*nvar], y_obj[c_idx*nInd*nobj + k*nobj]);
           update_reference(y_obj[c_idx*nInd*nobj + k*nobj]); 
	   changed[c_idx*nInd*nobj+nobj*k] = false;
     	   //R2_pop.push_back(y_obj[k]);
     	   nfes++;
      }
      non_dominated_sorting(y_obj[c_idx*nInd*nobj]);
//      n_fill(&fitness[c_idx*nInd], nInd, -1);
     for(auto p_idx:parent_idx) *(pointer_hyp(p_idx, c_idx))= *(pointer_hyp(c_idx, p_idx)) =-1, *(pointer_dist(c_idx, p_idx))=-1;
//      if(R2_pop.size() >= 2*n_archive) 
//      update_external_file(R2_pop);
   }
   replacement_phase();
}
void CMOEAD::exec_emo(int run)
{
        char filename1[5024];
        char filename2[5024];
	srand(run);
	//initialization
	nfes      = 0;
	init_population();

	sprintf(filename1,"%s/POS/POS_R2_EMOA_%s_RUN%d_seed_%d_nobj_%d_nvar_%d_DI_%lf_DF_%lf_CR_%lf_F_%lf",strpath, strTestInstance,run, run, nobj, nvar, Di/sqrt(nvar*nInd), Df, CR, F);
	sprintf(filename2,"%s/POF/POF_R2_EMOA_%s_RUN%d_seed_%d_nobj_%d_nvar_%d_DI_%lf_DF_%lf_CR_%lf_F_%lf",strpath, strTestInstance,run, run, nobj, nvar, Di/sqrt(nvar*nInd), Df, CR, F);
        long long current = nfes;
	long long accumulator = 0, bef = nfes;
	//save_pos(filename1);
        save_front(filename2);
	while(nfes<max_nfes)
	{
		update_parameterD();
		accumulator += nfes - bef ;
                if(accumulator > 0.1*(max_nfes)  )
		{
	           accumulator -= 0.1*(max_nfes);
		   save_pos(filename1);
		   save_front(filename2);
		}
		bef=nfes;
		evol_population();
	}

        update_external_file(R2_pop);
	save_pos(filename1);
	save_front(filename2);
}
void CMOEAD::save_front(char saveFilename[4024])
{

    std::fstream fout;
    fout.open(saveFilename,fstream::app|fstream::out );
    for(int n=0; n < nPop; n++)
    {
       for(int i = 0; i < nInd; i++)
       {
          for(int k=0;k<nobj;k++)
             fout<<pool[parent_idx[n]].y_obj[i][k]<<"  ";
          for(int k=0;k<nobj;k++)
             fout<<pool[child_idx[n]].y_obj[i][k]<<"  ";

          fout<<"\n";
      }
    }
    for(int n=0; n < R2_pop.size(); n++)
    {
          for(int k=0;k<nobj;k++)
             fout<<R2_pop[n][k]<<"  ";
          fout<<"\n";
    }
    fout.close();
}
void CMOEAD::save_pos(char saveFilename[4024])
{
   std::fstream fout; //fout.open(saveFilename,std::ios::out);
   fout.open(saveFilename, fstream::app|fstream::out);
   fout.close();
}
void CMOEAD::replacement_phase()
{
  auto compare_l = [&](const int &a, const int &b)->bool
  {
     strIndividual &ind_a = pool[a], &ind_b = pool[b];
     double *a
     int rank = 0, sf1 = ind_a.fronts.size(), sf2=ind_b.fronts.size();
     do{
	if(ind_a.fitness.size() <= rank) {eval_R2(ind_a, rank); continue;}
	if(ind_b.fitness.size() <= rank) {eval_R2(ind_b, rank); continue;}	
        if(ind_a.fitness[rank] > ind_b.fitness[rank]) return true;
        else if(ind_b.fitness[rank] > ind_a.fitness[rank]) return false;
        rank++;	
     }while(rank<nInd && rank < sf1 && rank <sf2);
     return false;
  };
  unordered_set<int> penalized, survivors;
  priority_queue<int, vector<int>, decltype(compare_l)> candidates(compare_l);
  for(int i = 0; i < pool.size(); i++) candidates.push(i);
  while(!candidates.empty() && survivors.size() < nPop)
  {
     int idx = candidates.top(); candidates.pop();
     bool flagIsSurvivor=true;
     for(auto s:survivors) 
	if(distance_var(s, idx) < D){flagIsSurvivor = false; break;}
     if(flagIsSurvivor)
	survivors.insert(idx);
     else penalized.insert(idx);
  }
  vector<double> mindist(pool.size(), DBL_MAX);
  for(auto p:penalized)
    for(auto s:survivors)
       mindist[p] = min(mindist[p], distance_var(s, p));
  while(survivors.size() < nPop)
  {
     pair<double, int> max_dcn(-1, -1);
     for(auto p:penalized) 
	if(max_dcn.first < mindist[p]) max_dcn = make_pair(mindist[p], p);
     //update max_dcn..
     survivors.insert(max_dcn.second);
     penalized.erase(max_dcn.second);
     for(auto p:penalized) mindist[p] = min(mindist[p], distance_var(max_dcn.second, p));
  } 
  vector<bool> checked(pool.size(), false);
  int i = 0;
  for(auto s:survivors)
  {
     parent_idx[i++] = s;
     checked[s] = true;
  }
  for(int i = 0, j=0; i < pool.size(); i++) if(!checked[i]) child_idx[j++] = i;
}
void CMOEAD::obj_eval(double *x_var, double *y_obj)
{
   if(!strcmp("UF1", strTestInstance))  CEC09_F1(y_obj, x_var);
  else if(!strcmp("UF2", strTestInstance))  CEC09_F2(y_obj, x_var);
  else if(!strcmp("UF3", strTestInstance))  CEC09_F3(y_obj, x_var);
  else if(!strcmp("UF4", strTestInstance))  CEC09_F4(y_obj, x_var);
  else if(!strcmp("UF5", strTestInstance))  CEC09_F5(y_obj, x_var);
  else if(!strcmp("UF6", strTestInstance))  CEC09_F6(y_obj, x_var);
  else if(!strcmp("UF7", strTestInstance))  CEC09_F7(y_obj, x_var);
  else if(!strcmp("UF8", strTestInstance))  CEC09_F8(y_obj, x_var);
  else if(!strcmp("UF9", strTestInstance))  CEC09_F9(y_obj, x_var);
  else if(!strcmp("UF10", strTestInstance)) CEC09_F10(y_obj, x_var);
  else if(!strcmp("WFG1", strTestInstance))  wfg1(y_obj, x_var);
  else if(!strcmp("WFG2", strTestInstance))  wfg2(y_obj, x_var);
  else if(!strcmp("WFG3", strTestInstance))  wfg3(y_obj, x_var);
  else if(!strcmp("WFG4", strTestInstance))  wfg4(y_obj, x_var);
  else if(!strcmp("WFG5", strTestInstance))  wfg5(y_obj, x_var);
  else if(!strcmp("WFG6", strTestInstance))  wfg6(y_obj, x_var);
  else if(!strcmp("WFG7", strTestInstance))  wfg7(y_obj, x_var);
  else if(!strcmp("WFG8", strTestInstance))  wfg8(y_obj, x_var);
  else if(!strcmp("WFG9", strTestInstance))  wfg9(y_obj, x_var);
  else if(!strcmp("DTLZ1", strTestInstance))  dtlz1(y_obj, x_var);
  else if(!strcmp("DTLZ2", strTestInstance))  dtlz2(y_obj, x_var);
  else if(!strcmp("DTLZ3", strTestInstance))  dtlz3(y_obj, x_var);
  else if(!strcmp("DTLZ4", strTestInstance))  dtlz4(y_obj, x_var);
  else if(!strcmp("DTLZ5", strTestInstance))  dtlz5(y_obj, x_var);
  else if(!strcmp("DTLZ6", strTestInstance))  dtlz6(y_obj, x_var);
  else if(!strcmp("DTLZ7", strTestInstance))  dtlz7(y_obj, x_var);
}
void CMOEAD::update_external_file(double *archive)
{
  unordered_set<int> selected = non_dominated_sorting(archive)[0];

  vector<double> contribution_R2(archive.size(), 0.0);
  vector< set<pair<double, int> > > w_set(nWeight);
  for(int w_idx = 0; w_idx < nWeight; w_idx++)
  {
      for(auto idx:selected)
         w_set[w_idx].insert(make_pair(fitnessfunction(archive[idx], &namda[w_idx*nobj]), idx));
      contribution_R2[w_set[w_idx].begin()->second] += (next(w_set[w_idx].begin(), 1)->first - next(w_set[w_idx].begin(), 0)->first);
  }
  while(selected.size() > n_archive)
  {
      pair<double, int> min_info(10000000, -1);
      //take the worst contribution-individual..                   
      for(auto idx:selected)
      {
         if(min_info.first > contribution_R2[idx])
           min_info = make_pair(contribution_R2[idx], idx);
      }
     //update contributions... 
     contribution_R2.assign(archive.size(), 0.0);
     for(int w_idx = 0; w_idx < nWeight; w_idx++)
     {
        w_set[w_idx].erase(make_pair(fitnessfunction(archive[min_info.second], &namda[w_idx*nobj]), min_info.second));
        contribution_R2[w_set[w_idx].begin()->second] += (next(w_set[w_idx].begin(), 1)->first - next(w_set[w_idx].begin(), 0)->first);
     }
     selected.erase(min_info.second);
  }
  vector<vector<double> > tmp = archive;
  archive.clear();
  for(auto idx:selected) archive.push_back(tmp[idx]);
}
void CMOEAD::eval_R2(strIndividual &ind, int rank)
{
     double fit = 0.0;
     for(int w = 0; w < nWeight; w++)
     {
       double minv = DBL_MAX;
       for(auto k:ind.fronts[rank])
           minv = min(minv, fitnessfunction(ind.y_obj[k], &namda[w*nobj]));
       fit += minv;
     }
     ind.fitness.push_back(fit);
}
void CMOEAD::realmutation(vector<double> &x_var, double rate)
{
    long double rnd, delta1, delta2, mut_pow, deltaq;
    long double y, yl, yu, val, xy;
    long double eta_m = etam;
    int id_rnd = rand()%nvar;
    for (int j=0; j<nvar; j++)
    {
        //if (rnd_uni<=rate || id_rnd==j)
        if (rnd_uni<=rate)
        {
            y  = x_var[j];
            yl = vlowBound[j];
            yu = vuppBound[j];
            delta1 = (y-yl)/(yu-yl);
            delta2 = (yu-y)/(yu-yl);
            rnd = rnd_uni;
            mut_pow = 1.0/(eta_m+1.0);
            if (rnd <= 0.5)
            {
                xy = 1.0-delta1;
                val = 2.0*rnd+(1.0-2.0*rnd)*(pow(xy,(eta_m+1.0)));
                deltaq =  pow(val,mut_pow) - 1.0;
            }
            else
            {
                xy = 1.0-delta2;
                val = 2.0*(1.0-rnd)+2.0*(rnd-0.5)*(pow(xy,(eta_m+1.0)));
                deltaq = 1.0 - (pow(val,mut_pow));
            }
            y = y + deltaq*(yu-yl);
            if (y<yl)
                y = yl;
            if (y>yu)
                y = yu;
            x_var[j] = y;
        }
    }
}
void CMOEAD::diff_evo_xoverA_exp(strIndividual &ind0, strIndividual &ind1, strIndividual &ind2, strIndividual &ind3, strIndividual &child, double CR, double F, int *asg_1, int *asg_2, int *asg_3)
{
	// Check Whether the cross-over to be performed
	/*Loop over no of variables*/
	int n = rand()%(nvar*nInd);//int(rnd_uni(&rnd_uni_init)*nvar*nInd);
	int cont =0;
	do{
         child.x_var[n/nvar][n%nvar] = ind1.x_var[asg_1[n/nvar]][n%nvar] + F*(ind2.x_var[asg_2[n/nvar]][n%nvar] - ind3.x_var[asg_3[n/nvar]][n%nvar]);
	  if(child.x_var[n/nvar][n%nvar]<vlowBound[n%nvar])
 	       child.x_var[n/nvar][n%nvar] = ind0.x_var[n/nvar][n%nvar];
	  if(child.x_var[n/nvar][n%nvar]>vuppBound[n%nvar])
	        child.x_var[n/nvar][n%nvar] = ind0.x_var[n/nvar][n%nvar];
	  if(child.x_var[n/nvar][n%nvar]<vlowBound[n%nvar]) child.x_var[n/nvar][n%nvar] = vlowBound[n%nvar];
	  if(child.x_var[n/nvar][n%nvar]>vuppBound[n%nvar]) child.x_var[n/nvar][n%nvar] = vuppBound[n%nvar];
	   child.changed[n/nvar]=true;
	   n++;
	   n %= (nvar*nInd);
	   cont++;
	}
        while(rnd_uni < CR && cont < (nvar*nInd) );
}
double CMOEAD::distance_obj(double *a, double *b)
{
   double dist =0.0;
   for(int i = 0; i < nobj; i++)
     dist += ((a[i]-b[i])*(a[i]-b[i]));
   return dist;
}
double CMOEAD::fitnessfunction(double *y_obj, double *namda)
{
	double max_fun = -1.0e+30;
	for(int n=0; n<nobj; n++)
	{
		double feval, diff = fabs(y_obj[n] - idealpoint[n]);
		if(namda[n]==0) feval = diff/0.0001;
		else feval = diff/namda[n];
		max_fun = max(max_fun, feval);
	}
	return max_fun;;
}

///void diff_evo_xoverA(CIndividual &ind0, CIndividual &ind1, CIndividual &ind2, CIndividual &ind3, CIndividual &child, double CR, double F, vector<bool> &changed)
///{
///	// Check Whether the cross-over to be performed
///	/*Loop over no of variables*/
///	int idx_rnd = rand()%(nvar*nInd);//int(rnd_uni(&rnd_uni_init)*nvar*nInd);
///	for(int n=0;n<nvar*nInd; n++)
///	{
///	  double rnd = rnd_uni;
///	  if(rnd<CR||n==idx_rnd)
///	  {
///              child.x_var[n/nvar][n%nvar] = ind1.x_var[asg_1[n/nvar]][n%nvar] + F*(ind2.x_var[asg_2[n/nvar]][n%nvar] - ind3.x_var[asg_3[n/nvar]][n%nvar]);
///	      if(child.x_var[n/nvar][n%nvar]<vlowBound[n%nvar])
/// 	           child.x_var[n/nvar][n%nvar] = ind0.x_var[n/nvar][n%nvar];//vlowBound[n] + rnd*(ind0.x_var[n] - vlowBound[n]);
///	      if(child.x_var[n/nvar][n%nvar]>vuppBound[n%nvar])
///	            child.x_var[n/nvar][n%nvar] = ind0.x_var[n/nvar][n%nvar];//vuppBound[n] - rnd*(vuppBound[n] - ind0.x_var[n]);
///	      if(child.x_var[n/nvar][n%nvar]<vlowBound[n%nvar]) child.x_var[n/nvar][n%nvar] = vlowBound[n%nvar];
///	      if(child.x_var[n/nvar][n%nvar]>vuppBound[n%nvar]) child.x_var[n/nvar][n%nvar] = vuppBound[n%nvar];
///	       changed[n/nvar]=true;
///	  }
///	}
///}
void CMOEAD::non_dominated_sorting(int c_idx) 
{
  double *points = y_obj[c_idx*nInd*nobj];
  int *f = fronts[c_idx*nInd*nInd], *sf = size_fronts[c_idx*nInd];
  memset(times_dominated, 0, sizeof(int)*nInd);
  memset(size_domin_to, 0, sizeof(int)*nInd);
  memset(sf,0, sizeof(int)*nInd);

  for(int pidx1=0; pidx1 < nInd; pidx1++)
  {
    for(int pidx2=0; pidx2 < nInd; pidx2++)
    {
      if(pidx1 == pidx2) continue;
      if( dominate(points[pidx1*nobj], points[pidx2*nobj])) domin_to[pidx1*nInd + size_domin_to[pidx1]] = pidx2, size_domin_to[pidx1]++;
      else if( dominate(points[pidx2*nobj], points[pidx1*nobj]) ) times_dominated[pidx1]++;
    }
    if(times_dominated[pidx1] == 0) *f = pidx1, f++, (*sf)++;
 }
  while(true)
  {
     for(int i  = 0; i < *sf; i++)
     {
       int idx = f[];
       for(int j = 0; j < size_domin_to[]; j++)
       {
	   times_dominated[j]--;
	   if(times_dominated[j] == 0)
	   {
	      next_front.insert(j);
	   }
       }
     }
     sf++;
    if()break;
//    if(next_front.empty())break;
//    fronts.push_back(next_front);
    current_rank++;
//    next_front.clear();
  }
  return fronts;
}
#endif
